package DataStructures;
//class SinglelinkedList{
     class Node{
	 int data; // data default value is 0
	  Node next; // next is a reference variable or pointer or address 
	             //of a next class Node.next  or object. its default value is null
	
	Node (int data){  
		this.data = data;
		this.next = null;
		  }
       }
  
     class SinglelinkedList{
      //Representing head and tail of the LinkedList
     public Node head = null;  
     //head node will point to  first node in the list .Kind of temporary node
     // if there is no node in the list, then the head value will be null
     // This instance variable 'head' helps in move to next node using 
     //reference value of the next node in the list
     public Node tail = null;  
     //tail node will point to last node in the list .Kind of temporary node
    
     
     //addNode() will add new node to the list
	public void addNode(int data) {
		//create new node
		Node newNode = new Node(data);
		// newNode variable will create new reference when addNote() is called
		//newNode.next = null;
		//System.out.println("Value of head = "+head);
		//use above while running for better understanding, 
		//adding first node, head value shows null ,after adding 2nd node 
		// head value some address
		
		//Below stm checks , whether 1st node is inserted/added in the list 
		// usually the 1st node will have 'null' value in the address part 
		//When 2nd node is added/inserted , the head address part will be changed
		// from 'null' value to some random address generated by the system. 
		//Therefore ,from 2nd insertion/addition onwards the control will 
		//go to 'else' part
		 
		
		if(head == null) {
			 
			 head = newNode;  
			 //head will have whatever NewNode has i.e data & address
			 //Note,in the 1st addition a 'null' value will be assigned 
			  //to head address part instead of  address/reference value 
			 // added to head while adding values for first time
			 tail = newNode;
			//tail will have whatever NewNode has i.e data & address
			 //Note: the head and tail will be same for the first node .therefore 
			 // both will have same  address i.e  null value for the first node
			
		      }
		      
		 else {  // the 'else' part will function from second insert onwards.
			 //newNode will be added after tail such that tail's next 
			 // will point to newNode
			 tail.next = newNode; // NOTE : here address of the new 
			  // newNode variable is assigned  to previous newNode instance variable 
			  //next of tail node . Previously 'next'  had 'null' values.This where 
			 // the actual link takes place btw nodes.
			// System.out.println("tail.next is : "+tail.next );
			 tail = newNode; // now tail node will have new data and 'null' reference 
			 }
		   /// System.out.println("tail data value is : "+tail.data);
		 
	       }
	   
	       //display() will display the nodes present in the list
	
	      public void display() {

	    	  //node current will point to head
	    	  Node current = head;   
	    	  //Current is a temporary node,value of 1st node i.e head 
	    	  //is assigned to current of type Node.With this we can get 
	    	  // the address of the remaining nodes 
	    	  
	    	  if(head == null) {
	    		  System.out.println("List is empty .....");
	    		  return;
	    	  }
	    	  
	    	  System.out.println("output of a Single LinkedList is :  ");
	    	  
	    	  while (current != null) {
	    		  //prints each node by incrementing pointer
	    		  System.out.println(current.data + " ");
	    		  current = current.next;// current variable moves to the next node
	    	  }
	 }
}      
	
	public class SingleLinked_Insertion{
     public static void main(String[] args) {
		// TODO Auto-generated method stub
		SinglelinkedList sList = new SinglelinkedList();
		    
		   sList.addNode(23);
		   sList.addNode(63);
		   sList.addNode(87);
		   sList.addNode(62);
		   sList.addNode(02);
		   
		   sList.display();
		
          }
	}


